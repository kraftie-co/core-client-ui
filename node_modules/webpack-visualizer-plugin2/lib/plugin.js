"use strict";

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var cssString = _fs["default"].readFileSync(_path["default"].join(__dirname, './style.css'), 'utf8');

var jsString = _fs["default"].readFileSync(_path["default"].join(__dirname, './main.js'), 'utf8');

module.exports = /*#__PURE__*/function () {
  function VisualizerPlugin() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      filename: 'stats.html'
    };

    _classCallCheck(this, VisualizerPlugin);

    this.opts = opts;
  }

  _createClass(VisualizerPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.emit.tapAsync('Visualizer', function (compilation, callback) {
        var stats = compilation.getStats().toJson({
          chunkModules: true
        });
        var stringifiedStats = JSON.stringify(stats).replace(/</g, '&lt;').replace(/>/g, '&gt;');
        var html = "\n                <!DOCTYPE html>\n                <html lang=\"en\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>Webpack Visualizer</title>\n                        <style>".concat(cssString, "</style>\n                    </head>\n                    <body>\n                        <div id=\"App\"></div>\n                        <script>window.stats = ").concat(stringifiedStats, ";</script>\n                        <script>").concat(jsString, "</script>\n                    </body>\n                </html>\n            ");

        var outputFile = _path["default"].join(compilation.outputOptions.path, _this.opts.filename);

        (0, _mkdirp["default"])(_path["default"].dirname(outputFile), function (mkdirpErr) {
          if (mkdirpErr) {
            console.log('webpack-visualizer-plugin: error writing stats file');
          }

          _fs["default"].writeFile(outputFile, html, function (err) {
            if (err) {
              console.log('webpack-visualizer-plugin: error writing stats file');
            }

            callback();
          });
        });
      });
    }
  }]);

  return VisualizerPlugin;
}();
